{"expireTime":9007200824588825000,"key":"transformer-remark-markdown-html-d290122c90c8103c260eec2013bdcafc-gatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":"<p><strong>Hoisting</strong>이란, 선언을 현재 스크립트 또는 현재 함수의 맨 위로 이동시키는 JavaScript의 기본 동작이다.</p>\n<p>만약, 변수가 함수 내에서 정의되었을 경우 선언이 <strong>함수 내부의 최상위</strong>로 Hoisting 되고, 함수 밖에 정의되었을 경우에는 선언이 <strong>전역 컨텍스트의 최상위</strong>로 Hoisting 된다.</p>\n<p>호이스팅 때문에 변수를 선언하기 전에 사용할 수 있다.</p>\n<p>JavaScript에서는 변수를 선언하기 전에 사용할 수 있다. 아래에 선언을 해도 선언한 것이 Hoisting 되어 위로 끌어올려지기 때문이다. 아래의 Code-1과 Code-2는 동일한 코드라고 보면 된다.</p>\n<p>Code-1\n1\n2\n3\n4\n5\n6\nx = 5; // x에 값을 할당</p>\n<p>elem = document.getElementById(“demo”);\nelem.innerHTML = x; //출력 결과 > 5</p>\n<p>var x; // x 선언\nCode-2\n1\n2\n3\n4\n5\nvar x; // x 선언\nx = 5; // x에 값을 할당</p>\n<p>elem = document.getElementById(“demo”);\nelem.innerHTML = x; //출력 결과 > 5</p>\n<p>할당은 호이스팅하지 않고, 선언만 호이스팅한다.\nJavaScript는 Hoisting을 할 때, 선언만 Hoisting하고, 할당은 Hoisting을 하지 않는다. 다음 Code-3과 Code-4는 동일한 코드라고 보면 된다.</p>\n<p>Code-3\n1\n2\n3\n4\n5\n6\nvar x = 5; // x를 선언하고 x에 5를 할당</p>\n<p>elem = document.getElementById(“demo”);\nelem.innerHTML = x + ” ” + y; // 출력 결과 > 5 undefined</p>\n<p>var y = 7; // y를 선언하고 y에 7을 할당\nCode-4\n1\n2\n3\n4\n5\n6\n7\nvar x = 5; // x를 선언하고 x에 5를 할당\nvar y; // y를 선언</p>\n<p>elem = document.getElementById(“demo”);\nelem.innerHTML = x + ” ” + y; // 출력 결과 > 5 undefined</p>\n<p>y = 7; // y에 7을 할당\n위의 Code-3과 Code-4에서 y에 할당된 값인 7이 출력되지 않고 undefined가 출력되는 이유는, 선언만 위쪽으로 끌어 올려지고(Hoisting), 할당은 위로 끌어 올려지지 않기 때문이다. hosting으로 인해 y는 사용되기 전에 선언은 되었지만, 할당이 수행되지 않았기 때문에 y값은 undefined가 되는 것이다.</p>\n<p>Hosting은 많은 개발자에게 알려지지 않거나 간과 된 JavaScript의 동작인데, 개발자가 Hosting을 이해하지 못하면 프로그램에 버그가 있을 수 있다. 따라서, 버그를 피하려면 항상 모든 범위의 시작 부분에 모든 변수를 선언하고 할당해야 한다.</p>"}