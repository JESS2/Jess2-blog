{"expireTime":9007200844942883000,"key":"transformer-remark-markdown-html-41704cfbbab7447167649488dde67277-gatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":"<h3 id=\"브라우저-주요-기능\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A3%BC%EC%9A%94-%EA%B8%B0%EB%8A%A5\" aria-label=\"브라우저 주요 기능 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 주요 기능</h3>\n<p>사용자가 선택한 자원을 서버에 요청하고 브라우저에 표시하는 것.</p>\n<p>자원은 보통 HTML 문서지만 PDF나 이미지 또는 다른 형태일 수 있다.</p>\n<p>자원의 주소는 URI(Uniform Resource Identifier)에 의해 정해진다.</p>\n<p>브라우저는 HTML과 CSS 명세에 따라 HTML 파일을 해석해서 표시하는데 이 명세는 웹 표준화 기구인 W3C에서 정한다.</p>\n<p>과거에는 브라우저들이 일부만 이 명세에 따라 구현하고 독자적인 방법으로 확장함으로써 웹 제작자가 심각한 호환성 문제를 겪었지만 최근에는 대부분의 브라우저가 표준 명세를 따른다.</p>\n<h3 id=\"브라우저의-주요-구성-요소\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EC%A3%BC%EC%9A%94-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C\" aria-label=\"브라우저의 주요 구성 요소 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저의 주요 구성 요소</h3>\n<ol>\n<li>사용자 인터페이스</li>\n<li>브라우저 엔진 : 사용자 인터페이스와 렌더링 엔진 사이의 동작을 제어</li>\n<li>렌더링 엔진 : 요청한 콘텐츠를 표시. 예를들어 HTML 을 요청하면 HTML과 CSS를 파싱하여 화면에 표시</li>\n<li>통신 : HTTP 요청과 같은 네트워크 호출에 사용됨.</li>\n<li>UI 백엔드 : OS 사용자 인터페이스 체계를 사용.</li>\n<li>자바스크립트 해석기 : 자바스크립트 코드를 해석하고 실행</li>\n<li>자료 저장소</li>\n</ol>\n<h3 id=\"렌더링-엔진\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%97%94%EC%A7%84\" aria-label=\"렌더링 엔진 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링 엔진</h3>\n<p>렌더링 엔진의 역할은 요청 받은 내용을 브라우저 화면에 표시한다.</p>\n<p>렌더링 엔진은 HTML 및 XML 문서와 이미지를 표시할 수 있고 플러그인이나 브라우저 확장 기능을 이용해서  PDF와 같은 다른 유형도 표시할 수 있다.</p>\n<h3 id=\"렌더링-엔진-종류-중-하나인-웹킷-동작-과정\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%97%94%EC%A7%84-%EC%A2%85%EB%A5%98-%EC%A4%91-%ED%95%98%EB%82%98%EC%9D%B8-%EC%9B%B9%ED%82%B7-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-label=\"렌더링 엔진 종류 중 하나인 웹킷 동작 과정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링 엔진 종류 중 하나인 ‘웹킷’ 동작 과정</h3>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bd7c5848-5579-46dd-9b63-49a4b8784e6f/browser.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bd7c5848-5579-46dd-9b63-49a4b8784e6f/browser.png\"></p>\n<h3 id=\"동작-과정\"><a href=\"#%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-label=\"동작 과정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동작 과정</h3>\n<p>렌더링 엔진은 통신으로부터 요청한 문서의 내용을 얻는 것으로 시작하는데 문서의 내용은 보통 8KB 단위로 전송된다.</p>\n<ol>\n<li>DOM 트리 구축을 위한 HTML 파싱</li>\n<li>렌더 트리 구축</li>\n<li>렌더 트리 배치</li>\n<li>렌더 트리 그리기</li>\n</ol>\n<p>렌더링 엔진은 HTML 문서를 파싱하고 콘텐츠 트리 내부에서 태그를 DOM 노드로 변환한다.</p>\n<p>그 다음, 외부 CSS 파일과 함께 포함된 스타일 요소도 파싱한다.</p>\n<p>스타일 정보와 HTML 표시 규칙은 <strong>렌더 트리</strong>를 생성한다.</p>\n<p>렌더 트리는 색상 또는 면적과 같은 시각적 속성이 있는 사각형을 포함하고 있는데 정해진 순서대로 화면에 표시한다.</p>\n<p>렌더 트리 생성이 끝나면 배치가 시작되는데 이것은 각 노드가 화면의 정확한 위치에 표시되는 것을 의미한다.</p>\n<p>그 다음은 UI 백엔드에서 렌더 트리의 각 노드를 가로지르며 형상을 만들어내는 그리기 과정이다.</p>\n<h3 id=\"1-domdocument-object-model-cssomcss-object-model-생성\"><a href=\"#1-domdocument-object-model-cssomcss-object-model-%EC%83%9D%EC%84%B1\" aria-label=\"1 domdocument object model cssomcss object model 생성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. DOM(Document Object Model), CSSOM(CSS Object Model) 생성</h3>\n<p>서버로부터 받은 HTML, CSS를 다운로드 받는다.</p>\n<p>HTML, CSS는 단순한 텍스트 파일이므로 연산과 관리가 유리하도록 Object Model로 만들게 된다.</p>\n<p>HTML, CSS 파일은 각각 DOM Tree와 CSSOM으로 만들어진다.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/901e7490-fbf4-4289-af47-02ae4b86327b/img.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/901e7490-fbf4-4289-af47-02ae4b86327b/img.png\"></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3c85a0d9-40da-4557-b143-8fbf08d8514e/img_(1).png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3c85a0d9-40da-4557-b143-8fbf08d8514e/img_(1).png\"></p>\n<h3 id=\"2-render-tree-생성\"><a href=\"#2-render-tree-%EC%83%9D%EC%84%B1\" aria-label=\"2 render tree 생성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Render Tree 생성</h3>\n<p>DOM Tree와 CSSOM Tree가 만들어졌으면 그 다음으로는 이 둘을 이용하여 Render Tree를 생성한다.</p>\n<p>순수한 요소들의 구조와 텍스트만 존재하는 DOM Tree와는 달리 Render Tree에는 스타일 정보가 설정되어 있으며 실제 화면에 표시되는 노드들로만 구성된다.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9bca5969-e3b6-4ab7-bba6-0b8f13445c13/img_(2).png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9bca5969-e3b6-4ab7-bba6-0b8f13445c13/img_(2).png\"></p>\n<p><code class=\"language-text\">display: none</code> 속성이 설정된 노드는 화면에 어떠한 공간도 차지하지 않는다.</p>\n<p>따라서 Render Tree를 만드는 과정에서 제외된다.</p>\n<p><code class=\"language-text\">visibility: invisible</code>은 <code class=\"language-text\">display:none</code>과 비슷하게 동작하지만, 공간은 차지하고 요소가 보이지 않게만 하기 때문에 Render Tree에 포함된다.</p>\n<h3 id=\"3-layout\"><a href=\"#3-layout\" aria-label=\"3 layout permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Layout</h3>\n<p>Layout 단계는 브라우저의 뷰포트(Viewport) 내에서 각 노드들의 정확한 위치와 크기를 계산한다.</p>\n<p>즉, 생성된 Render Tree 노드들이 가지고 있는 스타일과 속성에 따라서 브라우저 화면의 어느 위치에 어느 크기로 출력될지 계산하는 단계.</p>\n<p>Layout 단계를 통해 %, vh, vw와 같이 상대적인 위치, 크기 속성은 실제 화면에 그려지는 pixel 단위로 변환된다.</p>\n<p>여기서 뷰포트란, 그래픽이 표시되는 브라우저의 영역, 크기를 말한다.</p>\n<p>뷰포트는 모바일의 경우 디스플레이의 크기, pc의 경우 브라우저 창의 크기에 따라 달라진다.</p>\n<p>그리고 화면에 그려지는 각 요소들의 크기와 위치는 %, vh, vw와 같이 상대적으로 계산하여 그려지는 경우가 많기 때문에 viewport 크기가 달라질 경우 매번  계산을 다시해야 한다.</p>\n<h3 id=\"4-paint\"><a href=\"#4-paint\" aria-label=\"4 paint permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Paint</h3>\n<p>Layout 계산이 완료되면 이제 요소들로 실제 화면을 그리게 된다.</p>\n<p>이전 단계에서 이미 요소들의 위치와 크기, 스타일 계산이 완료된 Render Tree를 이용해 실제 픽셀값을 채워넣는다.</p>\n<p>이 때 텍스트, 색, 이미지, 그림자 횩화 등이 모두 처리되어 그려진다.</p>\n<p>이 때 처리해야 하는 스타일이 복잡할수록, Paint 단계에 소요되는 시간이 늘어나게 된다.</p>\n<p>단순한 단색 background-color보다 그라데이션이나 그림자 효과 등이 painting 소요시간이 오래걸린다.</p>\n<h3 id=\"렌더링-최적화---reflow-repaint-줄이기\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B5%9C%EC%A0%81%ED%99%94---reflow-repaint-%EC%A4%84%EC%9D%B4%EA%B8%B0\" aria-label=\"렌더링 최적화   reflow repaint 줄이기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링 최적화 - Reflow, Repaint 줄이기</h3>\n<ol>\n<li>Reflow (Layout)</li>\n</ol>\n<p>위에서 언급된 렌더링 과정을 거친 뒤에 최종적으로 페이지가 그려진다고 해서 렌더링 과정이 다 끝난 것이 아니다.</p>\n<p>어떠한 액션이나 이벤트에 따라 html 요소의 크기나 위치 등 레이아웃 수치를 수정하면 그에 영향을 받는 자식 노드나 부모 노드들을 포함하여 layout 과정을 다시 수행한다.</p>\n<p>이렇게 되면 Render Tree와 각 요소들의 크기와 위치를 다시 계산하게 되는데 이 과정을 Reflow라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// reflow 발생 예제</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">'600px'</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>페이지 초기 렌더링 (최초 Layout 과정)</p>\n</li>\n<li>\n<p>윈도우 리사이징 (Viewport 크기 변경)</p>\n</li>\n<li>\n<p>노드 추가 또는 제거</p>\n</li>\n<li>\n<p>요소의 위치, 크기 변경 (left, top, margin, padding, border, width, height 등)</p>\n</li>\n<li>\n<p>폰트 변경과 이미지 크기 변경 등</p>\n</li>\n<li>\n<p>Repaint (Paint)</p>\n</li>\n</ul>\n<p>Reflow만 수행되면 실제 화면에 반영되지 않는다.</p>\n<p>위에서 언급된 렌더링 과정과 같이 Render Tree를 다시 화면에 그려주는 과정이 필요하다.</p>\n<p>결국은 Paint 단계가 다시 수행되는 것이며 이를 Repaint라고 한다.</p>\n<p>하지만 무조건 Reflow가 일어나야 Repaint가 일어나는 것은 아니다.</p>\n<p>background-color, visibility와 같이 레이아웃에는 영향을 주지 않는 스타일 속성이 변경되었을 때는 Reflow를 수행할 필요가 없기 때문에 Repaint만 수행한다.</p>\n<h3 id=\"reflow-repaint-줄이기\"><a href=\"#reflow-repaint-%EC%A4%84%EC%9D%B4%EA%B8%B0\" aria-label=\"reflow repaint 줄이기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflow, Repaint 줄이기</h3>\n<ol>\n<li>사용하지 않는 노드에는 visibility: invisible 보다 display: none 사용하기</li>\n</ol>\n<p>visibility invisible은 레이아웃 공간을 차지하기 때문에 reflow 대상이 된다. 하지만 display none은 레이아웃 공간을 차지하지 않아 Render Tree에서 아예 제외된다.</p>\n<ol start=\"2\">\n<li>Reflow, Repaint가 발생하는 속성 사용 피하기</li>\n</ol>\n<p>Reflow Repaint가 일어나지 않는 transform, opacitiy와 같은 속성도 있습니다. 따라서 left, right, width, height 보다 transform을, visibility/display 보다 opacitiy를 사용하는 것이 성능 개선에 도움이 된다.</p>\n<h3 id=\"virtual-dom\"><a href=\"#virtual-dom\" aria-label=\"virtual dom permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtual Dom</h3>\n<p>일반적으로 dom에 접근하여 여러번의 속성 변화, 여러번의 스타일 변화를 수행하면 그에따라 여러번의 Reflow, Repaint가 발생한다. </p>\n<p><strong>하지만 Virtual DOM은 이렇게 변화가 일어나 Reflow, Repaint가 필요한 것들을 한번에 묶어서 dom에 전달한다.</strong> </p>\n<p>따라서 처리되는 Reflow, Repaint의 규모가 커질 수는 있지만 한번만 연산을 수행하게 된다.</p>\n<p>이를 통해 여러번 Reflow, Repaint를 수행하며 연산이 반복적으로 일어나는 부분이 줄어들어 성능이 개선되는 것이다.</p>"}