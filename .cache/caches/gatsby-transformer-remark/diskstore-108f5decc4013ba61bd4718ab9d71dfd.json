{"expireTime":9007200841314100000,"key":"transformer-remark-markdown-html-448df944d9d634660b9d1a4f6ba9f374-gatsby-remark-imagesgatsby-remark-images-medium-zoomgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-autolink-headersgatsby-remark-emoji-","val":"<p>자바스크립트는 현재 세 가지 종류가 있다.</p>\n<p>웹 브라우저에서 동작하는 표준 자바스크립트인 ES5, 2015년부터 매년 새로운 버전을 발표하는 ESNext, 그리고 ESNext에 타입 기능을 추가한 타입스크립트.</p>\n<p>ESNext는 ES5의 모든 문법을 포함하고, 타입스크립트는 ESNext의 모든 문법을 포함한다. 따라서 타입스크립트로 개발했더라도 타입 기능을 사용하지 않는다면 ESNext 소스나 마찬가지다.</p>\n<p>타입스크립트는 마이크로소프트가 개발하고 유지하고 있는 오픈소스 프로그래밍 언어로, 2012년 말 처음 발표 되었다. 구글의 Angular.js 팀이 앵귤러 버전 2를 만들면서 타입스크립트를 채택한 이후부터 널리 알려졌다. 요즘에는 리액트나 뷰도 타입스크립트를 사용해 개발되고 있다.</p>\n<p>자바스크립트에 타입 기능이 있으면 좋은 이유</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function makePerson(name, age) {}\n\nmakePerson(32, &quot;Jack&quot;)\n\nfunction makePerson(name: string, age: number) {}</code></pre></div>\n<p>타입스크립트의 타입 기능을 이용해 구현하면 타입스크립트 컴파일러(TSC)는 문제의 원인이 무엇인지 친절하게 알려주기 때문에 오류의 원인을 쉽게 알 수 있다.</p>\n<p>트랜스파일</p>\n<p>ESNext 자바스크립트 소스코드는 바벨(Babel)이라는 트랜스파일러(transpiler)를 거치면 ES5 자바스크립트 코드로 변환된다.</p>\n<p>바벨과 유사하게 타입스크립트 소스코드는 TSC(TypeScript Compiler)라는 트랜스파일러를 통해 ES5 자바스크립트 코드로 변환된다.</p>\n<p>여기서 트랜스 파일러란, 어떤 프로그래밍 언어로 작성된 소스코드를 또 다른 프로그래밍 언어로 된 소스코드로 바꿔주는 프로그램이다. 트랜스파일러는 텍스트로 된 소스코드를 바이너리 코드로 바꿔주는 컴파일러와 구분하기 위해 생긴 용어이다.</p>\n<p>타입스크립트는 ESNext 문법을 대부분 지원하므로 타입스크립트를 다루려면 ESNext 문법을 알아야 한다. 그리고 타입스크립트에만 고유한 문법도 있다.</p>\n<p>ESNext 주요 문법</p>\n<ol>\n<li>비구조화 할당</li>\n<li>화살표 함수</li>\n<li>클래스</li>\n<li>모듈</li>\n<li>생성기</li>\n<li>Promise와 async/awiat 구문</li>\n</ol>\n<p>타입스크립트 고유 문법</p>\n<ol>\n<li>\n<p>타입 주석과 타입 추론</p>\n</li>\n<li>\n<p>인터페이스</p>\n</li>\n<li>\n<p>튜플</p>\n</li>\n<li>\n<p>제네릭 타입</p>\n</li>\n<li>\n<p>대수 타입</p>\n</li>\n<li>\n<p>타입 주석과 타입 추론</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let n: number = 1;\nlet m = 2;</code></pre></div>\n<ul>\n<li>\n<p>타입 주석(type annotation) : 변수 n뒤의 콜론(:)과 타입 이름</p>\n</li>\n<li>\n<p>타입 추론(type inference) : 2행처럼 타입 부분을 생략할 수도 있다. 타입스크립트는 변수와 타입부분이 생략되면 대입 연산자의 오른쪽 값을 분석해 왼쪽 변수의 타입을 결정한다.\n타입스크립트의 타입 추론 기능은 자바스크립트 소스코드와 호환성을 보장하는 데 큰 역할을 한다. 타입 추론 덕분에 자바스크립트로 작성된 ‘.js’ 파일을 확장자만 ‘.ts’로 바꾸면 타입스크립트 환경에서도 바로 동작한다.</p>\n<p>let n: number = 1;\nlet b: boolean = true;\nlet s: string = “hello”;\nlet o: object = {};</p>\n<p>n = “world”; // 타입 불일치 오류 발생\nb = 1; // 타입 불일치 오류 발생\ns = false; // 타입 불일치 오류 발생</p>\n</li>\n</ul>\n<p>타입스크립트는 자바스크립트와 다르게 let으로 선언한 변숫값은 타입 주석으로 명시한 타입에 해당하는 값으로만 바꿀 수 있다.</p>\n<p>any 타입</p>\n<p>타입스크립트는 자바스크립트와 호환을 위해 any라는 이름의 타입을 제공한다. 다음 코드에서 변수 a는 타입이 any이므로 값의 타입과 무관하게 어떤 종류의 값도 저장할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let a: any = 0;\na = &quot;hello&quot;; // 가능\na = true; // 가능\na = {}; // 가능</code></pre></div>\n</li>\n<li>\n<p>인터페이스</p>\n</li>\n</ol>\n<p>타입스크립트는 객체의 타입을 정의할 수 있게 해주는 interface라는 키워드를 제공한다. 인터페이스는 객체의 타입을 정의하는 것이 목적이므로 다음처럼 객체를 의미하는 중괄호 {}로 속성과 속성의 타입 주석을 나열하는 형태로 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface Person {\n\tname: string\n\tage?: number\n};\n\nlet person: Person = { name: &quot;Jane&quot; };</code></pre></div>\n<p><code class=\"language-text\">age?: number</code> is a shorthand for <code class=\"language-text\">age: number | undefined</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface IPerson {\n\tname: string\n\tage: number\n}\n\nlet good: IPerson = { name: &#39;Jessie&#39;, age: 29 };\n\nlet bad1: IPerson = { name: &#39;Jessie&#39; }; // age 속성이 없으므로 오류\nlet bad2: IPerson = { age: 29 }; // name 속성이 없으므로 오류\nlet bad3: IPerson = {}; // name과 age 속성이 없으므로 오류\nlet bad4: IPerson = { name: &#39;Jessie&#39;, age: 29, etc: true }; // etc 속성이 있어서 오류</code></pre></div>\n<p>선택 속성 구문</p>\n<p>인터페이스를 설계할 때 어떤 속성은 반드시 있어야 하지만, 어떤 속성은 있어도 되고 없어도 되는 형태로 만들고 싶을 때가 있다. 이러한 속성을 선택 속성(optional property)이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface IPerson2 {\n\tname: string // 필수 속성\n  age: number // 필수 속성\n\tetc?: boolean // 선택 속성\n}\nlet good1: IPerson2 = { name: &#39;Jessie&#39;, age: 29 };\nlet good2: IPerson2 = { name: &#39;Jessie&#39;, age: 29, etc: true };</code></pre></div>\n<p>익명 인터페이스</p>\n<p>타입스크립트는 interface 키워드도 사용하지 않고 인터페이스의 이름도 없는 인터페이스를 만들 수 있다. 이를 익명 인터페이스(anonymous interface)라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let ai: {\n\tname: string\n\tage: number\n\tetc?: boolean\n} = {name: &#39;Jessie&#39;, age: 29}\n\nfunction printMe(me: {name: string, age: number, etc?: boolean}) {\n\tconsole.log(me.etc ? `${me.name} ${me.age} ${me.etc}` : `${me.name} ${me.age}`)\n}\nprintMe(ai); // Jessie 29</code></pre></div>\n<ol start=\"3\">\n<li>튜플</li>\n</ol>\n<p>튜플은 물리적으로는 배열과 같다. 다만, 배열에 저장되는 아이템의 데이터 타입이 모두 같으면 배열, 다르면 튜플이다.</p>\n<ul>\n<li>\n<p>배열 : 저장되는 아이템의 데이터 타입이 모두 같을 경우</p>\n</li>\n<li>\n<p>튜플 : 저장되는 아이템의 데이터 타입이 다를 경우</p>\n<p>let numberArray: number[] = [1,2,3]; // 배열\nlet tuple: [boolean, number, string] = [true, 1, ‘Ok’]; // 튜플</p>\n</li>\n<li>\n<p>제네릭 타입</p>\n</li>\n</ul>\n<p>다양한 타입을 한꺼번에 취급할 수 있게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Container&lt;T&gt; {\n\tconstructor(public value: T) { }\n}\nlet numberContainer: Container&lt;number&gt; = new Container&lt;number&gt;(1);\nlet stringContainer: Container&lt;string&gt; = new Container&lt;string&gt;(&#39;Hello world&#39;);</code></pre></div>\n<p>Container 클래스는 value 속성을 포함한다. 이 클래스는 Container<number>, Container<string>, Container&#x3C;number[]>, Container<boolean>처럼 여러가지 타입을 대상으로 동작할 수 있다. 이것을 제네릭 타입(generic type)이라고 한다.</p>\n<ol start=\"5\">\n<li>대수 타입</li>\n</ol>\n<p>다른 자료형의 값을 가지는 자료형을 의미한다.</p>\n<p>대수 타입에는 크게 합집합 타입과 교집합 타입 두 가지가 있다. 합집합 타입은 ’|’ 기호를, 교집합 타입은 ’&#x26;’ 기호를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type NumberOrString = number | string;\ntype AnimalAndPersion = Animal &amp; Persion;</code></pre></div>"}