{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Jess2.xyz","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"참조 할당, 얕은 복사, 깊은 복사에 관해…  원래 알고 있던 내용 기존에 정리했던 포스팅 참조 할당 주소값을 복사하는 것 얕은 복사 (Shallow Copy) 복사되어 새로운 메모리로 할당이 되지만 속성으로 갖고 있던 객체나 배열은 주소값이 복사되는 형태. ex) spread operator, object assign 깊은 복사 (Deep Copy) 복…","fields":{"slug":"/JavaScript/copy-2/"},"frontmatter":{"date":"December 05, 2021","title":"[JavaScript] 참조할당과 깊은복사, 얕은복사","category":"javascript"}}},{"node":{"excerpt":"2021 NAVER DEVIEW <슬기로운 웨일앱 개발> 세션 들으며 정리한 내용 1. 웨일 앱이란? Whale platform(Whale 브라우저나 Whale OS)에서 동작하는 확장앱 Whale Platform Chromium 기반 웹 서비스 플랫폼 Chromium 오픈소스 + Whale만의 서비스 Chromium 기능으로만 구성된 앱은 다른 브라우저…","fields":{"slug":"/seminar/naver-deview-2021-whale/"},"frontmatter":{"date":"November 26, 2021","title":"[Seminar] 2021 NAVER DEVIEW 슬기로운 웨일앱 개발","category":"seminar"}}},{"node":{"excerpt":"0. Table of Contents What is OOP  Objects Prototypes 👉 Current Page Prototypical Inheritance (TBD) ES6 Classes (TBD) ES6 Modules (TBD) 1. 상속 (Inheritance) 상속은 객체가 다른 객체의 속성과 메서드를 사용할 수 있도록 하는 OOP의 핵심…","fields":{"slug":"/JavaScript/oop-3/"},"frontmatter":{"date":"October 22, 2021","title":"[JavaScript] OOP - 3. Prototypes","category":"javascript"}}},{"node":{"excerpt":"0. Table of Contents What is OOP  Objects 👉 Current Page Prototypes Prototypical Inheritance (TBD) ES6 Classes (TBD) ES6 Modules (TBD) 1. Creating Objects 중괄호 ()를 객체 리터럴 구문이라고 한다. 객체는 key-value 쌍을 가진…","fields":{"slug":"/JavaScript/oop-2/"},"frontmatter":{"date":"October 16, 2021","title":"[JavaScript] OOP - 2. Objects","category":"javascript"}}},{"node":{"excerpt":"해시 테이블 (Hash Table) F(key) → Hash Code → Index → Value 검색하고자 하는 key값을 입력받아서 해시 함수를 돌려서 반환받은 해시 코드를 배열 index로 환산을 해서 데이터에 접근하는 방식의 자료구조이다 여기서 값은 문자열이 될 수도 있고 숫자, 파일 데이터도 될 수 있다. 해시 함수는 어떤 특정한 규칙을 이용해서…","fields":{"slug":"/etc./hash/"},"frontmatter":{"date":"September 12, 2021","title":"[etc.] 해시 테이블과 해시 함수","category":"etc."}}},{"node":{"excerpt":"0. Table of Contents What is OOP 👉 Current Page  Objects Prototypes Prototypical Inheritance (TBD) ES6 Classes (TBD) ES6 Modules (TBD) 1. What is OOP? OOP(객체 지향 프로그래밍)란, 함수보다는 객체를 중심으로 하는 프로그래밍 스타일, …","fields":{"slug":"/JavaScript/oop-1/"},"frontmatter":{"date":"September 06, 2021","title":"[JavaScript] OOP - 1. What is OOP","category":"javascript"}}},{"node":{"excerpt":"0. Index 고차 함수란? 많이 사용되는 배열 고차 함수들 forEach map filter reduce some every find findIndex fill sort includes 다양한 고차 함수들 시각화 비교 성능 비교 1. 고차 함수란? 함수를 인자로 전달받거나 함수를 결과로 반환하는 함수 2. 많이 사용되는 배열 고차 함수들 2-1. Ar…","fields":{"slug":"/JavaScript/higher-order-function/"},"frontmatter":{"date":"September 05, 2021","title":"[JavaScript] 배열 고차 함수","category":"javascript"}}},{"node":{"excerpt":"한 사이트에서 주소가 다른 서버로 요청을 보낼 때 CORS 관련 에러가 발생한다. https://aaa.com 에서 https://bbb.com/api/ccc API로 정보를 받아오기 위해 ‘프론트’에서 HTTP 요청을 보냈을 때 미리 특정 설정을 해주지 않으면 CORS 관련 에러로 막히게 된다. ‘PostMan’ 같은 것으로 똑같은 요청을 보내거나 ‘백…","fields":{"slug":"/web/cors/"},"frontmatter":{"date":"August 06, 2021","title":"[WEB] CORS : 교차 출처 리소스 공유 (Cross-Origin Resource Sharing)","category":"web"}}},{"node":{"excerpt":"1. 참조 할당 에 을 할당할 때, 주소값이 할당되는 것이기 때문에 한 객체의 값을 수정하면 다른 객체의 값 또한 동일하게 변한다. 2. 얕은 복사 - Shallow Copy 2-1. Object.assign()  메소드는 열거할 수 있는 하나 이상의 출처 객체(source)로부터 대상 객체(target)로 속성을 복사할 때 사용하고 대상 객체(targe…","fields":{"slug":"/JavaScript/copy/"},"frontmatter":{"date":"July 30, 2021","title":"[JavaScript] 깊은복사(Deep Copy)와 얕은복사(Shallow Copy)","category":"javascript"}}},{"node":{"excerpt":"ES6 이후부터 추가된 많은 문법들이 IE에서는 지원이 되지 않기 때문에 지원 여부를 확인하고 Babel을 이용해야 한다. Shorthand Property Names 자바스크립트에서 Object는 key와 value로 이루어져 있는데 key와 value의 이름이 동일한 경우에는 하나로만 축약해서 작성할 수 있다. Destructuring Assignme…","fields":{"slug":"/JavaScript/recent-js/"},"frontmatter":{"date":"July 28, 2021","title":"[JavaScript] 자바스크립트 최신 문법 살펴보기","category":"javascript"}}},{"node":{"excerpt":"웹 브라우저와 같은 Client가 어떻게 Server와 통신할 수 있는지 정의한 것이 HTTP(Hypertext Transfer Protocol)이다. Client와 Server가 통신하는 방법 HTTP를 이용해서 서버에 데이터를 요청해서 받아올 수 있는 방법으로 가 있다. 는 웹페이지에서 동적으로 서버와 데이터를 주고 받을 수 있는 기술을 의미한다. 대…","fields":{"slug":"/JavaScript/json/"},"frontmatter":{"date":"July 16, 2021","title":"[JavaScript] JSON","category":"javascript"}}},{"node":{"excerpt":"브라우저에서 제공하는 Console API는 심각성이나 기능에 따른 다양한 유용한 함수들이 많이 제공된다. console.log 개발 단계에서 데이터를 출력해보고 싶을 때 사용 배포할 때는 정말 필요한 경우가 아니라면 삭제해서 배포하는 것이 좋다. 무언가 출력한다는 것은 성능에 영향을 줄 수 있기 때문에 빈번하게 로그를 남겨놓는 것은 좋지 않다. exam…","fields":{"slug":"/JavaScript/console/"},"frontmatter":{"date":"July 07, 2021","title":"[JavaScript] JavaScript에서 Console API 100% 활용하기","category":"javascript"}}},{"node":{"excerpt":"0. Index 인터넷 네트워크 URI와 웹 브라우저 요청 흐름 HTTP 기본 HTTP 메서드 HTTP 메서드 활용 HTTP 상태코드 HTTP 헤더1 - 일반 헤더 HTTP 헤더2 - 캐시와 조건부 요청 1. 인터넷 네트워크 1-1. 인터넷 통신과 IP (인터넷 프로토콜) 인터넷 망은 굉장히 복잡한데 이 복잡한 인터넷에서 클라이언트 컴퓨터와 서버 컴퓨터는…","fields":{"slug":"/network/http-basic/"},"frontmatter":{"date":"July 03, 2021","title":"[Network] HTTP 웹 기본 지식","category":"network"}}},{"node":{"excerpt":"맵드 타입을 이용해서 인터페이스에 있는 속성을 optional로 바꾸거나 readonly로 바꿀 수 있다. Example 맵드 타입으로 만들어지는 것은 객체 타입이기 때문에 중괄호로 감싸준다. 대괄호로 감싼  은 key를 나타낸다. 여기에서 키워드의 오른쪽에  와 같이 유니온 타입으로 나열되는데 이것들이 이라는 전체 객체의 속성으로 만들어진다.\n위 코드에…","fields":{"slug":"/typescript/mapped-type/"},"frontmatter":{"date":"June 30, 2021","title":"[TypeScript] 맵드 타입","category":"typescript"}}},{"node":{"excerpt":"input autocomplete=“off” is not working 로그인을 완료하면 크롬 브라우저의 기능으로 우측 상단에 사용자 정보를 저장하시겠냐는 팝업이 뜬다. 이 때 저장을 완료하면  속성을 추가하더라도 로그인 창에서 입력했던 아이디와 비밀번호가 로그인 페이지가 아닌 다른 페이지의  창에도 자동으로 완성되어 입력되는 경우가 있다.  구글링을 해…","fields":{"slug":"/vue/how-to-set-autocomplete-off/"},"frontmatter":{"date":"June 19, 2021","title":"[Vue.js] input 자동 완성 입력 기능 끄기","category":"vue"}}},{"node":{"excerpt":"제네릭 타입 정보가 동적으로 결정되는 타입 제네릭을 통해 같은 규칙을 어러 타입에 적용할 수 있기 때문에 타입 코드를 작성할 수 있는 중복 코드를 제거할 수 있다. 단순히 타입만 다르고 로직은 동일할 때 와  함수가 하는 일의 로직은 거의 동일하다. 이럴 때 제네릭을 사용하면 중복 코드를 줄일 수 있다. 아래의 코드를 보자 제네릭을 이용해서 타입 정보를 …","fields":{"slug":"/typescript/generic/"},"frontmatter":{"date":"May 31, 2021","title":"[TypeScript] 제네릭","category":"typescript"}}},{"node":{"excerpt":"타입 호환성 타입 호환성이란? 어떤 타입을 다른 타입으로 취급해도 되는지 판단하는 것 정적 타입 언어의 가장 중요한 역할은 타입 호환성을 통해 컴파일 타임에 호환되지 않는 타입을 찾아내는 것 B 변수가 A 변수에 할당 가능하기 위해서는 B 변수의 타입이 A 변수의 타입에 할당 가능해야 한다. 할당이 가능한 지 판단할 때는 타입이 가질 수 있는 값의 집합을…","fields":{"slug":"/typescript/type-compatibility/"},"frontmatter":{"date":"May 24, 2021","title":"[TypeScript] 타입 호환성","category":"typescript"}}},{"node":{"excerpt":"함수 타입 this 의 타입 this의 타입을 정의하지 않으면 컴파일 에러가 발생한다. 2행의  에서 이 오타가 났는데도 에서는 컴파일 에러가 발생하지 않는다. 아래와 같이 this의 타입을 정의할 수 있다. 타입스크립트는 맨 앞에 this가 사용되면 이것을 this의 타입이라고 인식하고, 이 함수의 매개변수는 두 번째부터 시작된다고 본다. this의 타…","fields":{"slug":"/typescript/types-2/"},"frontmatter":{"date":"May 22, 2021","title":"[TypeScript] 함수 타입과 인터페이스","category":"typescript"}}},{"node":{"excerpt":"0. Index 기본 타입, 튜플 타입 null, undefined, 유니온 타입 숫자와 문자열의 리터럴도 타입으로 지정할 수 있다 any 타입 함수의 반환 타입 : void, never 함수의 Parameters 객체의 타입 : object Union 타입과 Intersection 타입 타입에 별칭 주기 1. 기본 타입, 튜플 타입  : 숫자  : 불리…","fields":{"slug":"/typescript/types-1/"},"frontmatter":{"date":"May 19, 2021","title":"[TypeScript] 타입 정의하기 - 기본 타입","category":"typescript"}}},{"node":{"excerpt":"0. Index JavaScript vs TypeScript 동적 타입 언어 vs 정적 타입 언어 TypeScript 정적 타입 언어가 동적 타입 언어보다 생산성이 높은 이유 1 정적 타입 언어가 동적 타입 언어보다 생산성이 높은 이유 2 1. JavaScript vs TypeScript JavaScript 동적 타입 언어 (JavaScript, Pyth…","fields":{"slug":"/typescript/javascript-vs-typescript/"},"frontmatter":{"date":"May 18, 2021","title":"[TypeScript] 동적 타입 언어 vs 정적 타입 언어","category":"typescript"}}},{"node":{"excerpt":"HTTP 응답 상태 코드 5가지 종류 100번대 : 정보를 제공하는 응답 200번대 : 성공적인 응답 300번대 : 리다이렉트 400번대 : 클라이언트 에러 500번대 : 서버 에러 200번대 (정상) 200 OK 요청이 성공적으로 완료됨 201 Created 요청이 성공적으로 완료됨 요청 결과로 새로운 리소스가 생성됨 이 응답은 일반적으로 POST 요청…","fields":{"slug":"/network/http-response-code/"},"frontmatter":{"date":"May 14, 2021","title":"[Network] 실무에서 자주 쓰이는 HTTP 응답 상태 코드","category":"network"}}},{"node":{"excerpt":"무조건 Object와 Array를 사용하는 것보다, Map과 Set을 사용하는 것이 더 적합하고 코드도 간결해지는 경우가 있다. ES6의 기능인 Map과 Set에 대해서 알아보자.  Map 객체와 유사한 콜렉션 key와 value를 같이 저장하는 객체와 같은 형태이다. 객체와 유사하지만 더 많은 기능을 제공한다. 자주 쓰이는 Map의 메소드  : Map …","fields":{"slug":"/JavaScript/map-set/"},"frontmatter":{"date":"May 13, 2021","title":"[JavaScript] ES6 : Map과 Set 익히기","category":"javascript"}}},{"node":{"excerpt":"Static Sites (1990) 기본적으로 웹은 Client와 Server로 나뉘어진다. Client는 요청을 보내는 역할 Server에서 요청을 받아 보고 알맞은 정보를 응답해준다. Client에서 특정 url로 접속을 하면 해당 서버에 이미 배포되어 있는 html 문서들 중 알맞은 html을 내려준다. Client는 서버로부터 받은 응답(html …","fields":{"slug":"/web/csr-ssr/"},"frontmatter":{"date":"May 05, 2021","title":"[WEB] Client Side Rendering과 Server Side Rendering","category":"web"}}},{"node":{"excerpt":"자바스크립트 타이머(setTimeout, setInterval)는 지정한 시간에 콜백 함수가 실행되는 것을 보장하지 못한다. 그 이유는, 싱글 스레드와 아주 밀접한 관련이 있다. 자바스크립트는 싱글 스레드 기반의 언어이다. 스레드가 하나라는 말은 동시에 하나의 작업 만을 처리할 수 있다는 것인데, 왜 많은 작업이 동시에 처리되고 있는 것처럼 보이는 것일까…","fields":{"slug":"/JavaScript/event-loop/"},"frontmatter":{"date":"April 27, 2021","title":"[JavaScript] 싱글 스레드와 이벤트 루프","category":"javascript"}}},{"node":{"excerpt":"1. 스코프 체인 에서 에 어떤 값이 들어있는지 찾을 때 들여다 보는 곳이 스코프다. 여기서 이 스코프는  함수에 속해있다. 자바스크립트(ES5)는 함수 단위로 스코프가 생성된다. 에서 의 값을 찾으려고 할 때 들여다보는 곳이 스코프이고 스코프는 함수 단위이다.\n이 때,  함수 스코프,  함수 스코프,  스코프가 존재하는데  스코프 안에서 먼저 가 존재하…","fields":{"slug":"/JavaScript/scope-chain-closure/"},"frontmatter":{"date":"April 27, 2021","title":"[JavaScript] 스코프 체인과 클로저","category":"javascript"}}},{"node":{"excerpt":"JavaScript 에서 함수의 this 키워드는 다른 언어들과 비교하여 조금 다르게 동작한다. 대부분의 경우, this의 값은 “함수를 호출하는 방법에 의해 결정”된다. 실행하는 동안의 할당에 의해 설정될 수 없고 함수가 호출될 때마다 다를 수 있다. ES5 bind로 함수의 this 값을 “함수가 어떻게 호출되었는지”와는 상관 없이 설정할 수 있다. …","fields":{"slug":"/JavaScript/this-2/"},"frontmatter":{"date":"April 21, 2021","title":"[JavaScript] this","category":"javascript"}}},{"node":{"excerpt":"자바스크립트의 모든 Object는 프로토타입이라는 속성을 가지고 있다. 1. getPrototypeOf : 프로토타입 접근  라는 함수로 프로토타입을 가져올 수 있다. 프로토타입은  또는  타입이다. 많은 자바스크립트 엔진에서는  라는 이름으로 프로토타입 속성에 접근할 수 있다. 자바스크립트 표준에서는 브라우저에서만  를 지원하는 것으로 나와있지만 사실 …","fields":{"slug":"/JavaScript/prototype-2/"},"frontmatter":{"date":"March 29, 2021","title":"[JavaScript] 프로토타입","category":"javascript"}}},{"node":{"excerpt":"1. 제너레이터란? 함수의 실행을 중간에 멈추고 재개할 수 있는 기능 실행을 멈출 때 값을 전달할 수 있음 반복문에서 제너레이터가 전달하는 값을 하나씩 꺼내서 사용할 수 있음 (배열과 비슷) 제너레이터는 배열과 달리 값을 미리 만들어 놓지 않는다. 값을 미리 만들어놓으면 불필요하게 메모리를 사용하는 단점이 있다. 제너레이터를 사용하면 필요한 순간에 값을 …","fields":{"slug":"/JavaScript/generator/"},"frontmatter":{"date":"March 27, 2021","title":"[JavaScript] 제너레이터","category":"javascript"}}},{"node":{"excerpt":"자바스크립트에서 비동기 처리하는 방법 Callback Promise async-await 1. Callback Example  함수는 callback 함수를 인자로 받고 비동기 처리가 끝나면 인자로 받은 함수를 호출한다. 동작 순서  출력 1초 후에  출력 콜백 패턴은 콜백이 조금만 중첩돼도 코드가 상당히 복잡해진다 → 콜백 지옥 동작 순서  :  콜백 …","fields":{"slug":"/JavaScript/asynchronous/"},"frontmatter":{"date":"March 22, 2021","title":"[JavaScript] 비동기 처리","category":"javascript"}}},{"node":{"excerpt":"1. 함수도 다른 변수처럼 취급된다 함수를 변수에 담을 수 있다. 함수를 매개변수로 전달할 수 있다. 함수 안에서 또 다른 함수를 반환할 수 있다. 반환된 함수를 변수에 할당하여 사용할 수 있다. 위와 같은 특징들은 자바스크립트에서 함수가 다른 변수처럼 취급되기 때문에 가능하다. 2. Closure (클로저) 클로저란, 함수와 그 함수를 둘러싸고 있는 주…","fields":{"slug":"/JavaScript/function/"},"frontmatter":{"date":"March 20, 2021","title":"[JavaScript] 함수와 this","category":"javascript"}}},{"node":{"excerpt":"1. 변수 1. 변수 정의 키워드 ES5까지는 var 키워드로 변수를 정의하는 것이 유일한 방법이었다. ES6(2015년에 나온 자바스크립트 표준)부터는 const와 let을 이용하는 새로운 변수 정의 방법이 생겼다. 2. var의 문제점 var로 정의된 변수는 함수 스코프를 가진다는 것이 문제다.\n함수를 벗어난 영역에서 사용하면 에러가 발생하고 함수 내…","fields":{"slug":"/JavaScript/object-array/"},"frontmatter":{"date":"March 16, 2021","title":"[JavaScript] 변수, 객체와 배열","category":"javascript"}}},{"node":{"excerpt":"0. Index Node.js와 NPM Webpack Babel과 ES6 모듈 문법 webpack.config.js 설정 더 자세히 살펴보기 Webpack Dev Server 1. Node.js와 NPM 1. Node.js / NPM 설치 먼저 Node.js를 설치해야 한다. https://nodejs.org/ko/ (LTS 버전 설치) Node.js를 …","fields":{"slug":"/web/webpack/"},"frontmatter":{"date":"March 10, 2021","title":"[WEB] Webpack","category":"web"}}},{"node":{"excerpt":"메모리 어플리케이션을 실행하면 어플리케이션마다 쓸 수 있는 메모리가 할당된다. 이 메모리는 크기가 제한적이다.  : 이라는 키워드로 이라는 변수를 정의하면 메모리를 가리킬 수 있는 포인터가 생성되고  변수에  라는 값을 할당하면 메모리에 가 저장되는 것이다.\n추후에  변수에  이라는 값을 다시 할당할 수 있다. 그러면 메모리에  값이 저장된다.  let …","fields":{"slug":"/JavaScript/data-type/"},"frontmatter":{"date":"March 01, 2021","title":"[JavaScript] Data Type","category":"javascript"}}},{"node":{"excerpt":"HTML에서 JS를 포함할 때 어떻게 포함하는 것이 더 효율적일까? 방법 1 - head 태그 안에 넣기  먼저 사용자가 HTML 파일을 다운로드 받았을 때 브라우저가 한 줄 한 줄씩 분석한다. 이걸 CSS와 병합해서 DOM 요소로 변환한다. HTML 태그를 한 줄 씩 파싱하다가  태그가 보이면 JS 를 다운로드 받아야 되네라고 이해하게 된다.\n그래서 H…","fields":{"slug":"/JavaScript/async-defer/"},"frontmatter":{"date":"February 28, 2021","title":"[JavaScript] HTML에 JS를 포함하는 방법 - async / defer","category":"javascript"}}},{"node":{"excerpt":"자바스크립트의 역사 1993 NCSA - Mosaic Web Browser 1994 Netscape - Netscape Navigator HTML/CSS로 간단하게 정적 웹 페이지를 만들 수 있었다. 시장 점유율 80% 이후 동적 웹사이트를 만들기 위한 고민 → Scripting 언어를 추가하자! Scheme Scriptint 언어를 조금 더 Java 언…","fields":{"slug":"/JavaScript/js-history/"},"frontmatter":{"date":"February 28, 2021","title":"[JavaScript] 자바스크립트의 역사와 현재 그리고 미래","category":"javascript"}}},{"node":{"excerpt":"0. Index 리액트란 무엇인가 create-react-app (CRA) 으로 시작하기 CSS 작성 방법 결정하기 단일 페이지 어플리케이션 (SPA) 속성값과 상태값 컴포넌트 함수의 반환값 리액트 요소와 가상돔 리액트 훅 훅 직접 만들기 훅 사용 시 지켜야할 규칙 Context API ref 속성값으로 자식 요소에 접근하기 리액트 내장 훅 1. 리액트란…","fields":{"slug":"/react/react-tip-0/"},"frontmatter":{"date":"January 28, 2021","title":"[React] 리액트 기초 개념 정리","category":"react"}}},{"node":{"excerpt":"0. Index 프로젝트 생성 및 환경 구성 Router & 컴포넌트 설계 Axios 통신 env 설정 네트워크 에러 처리 Validation 상태 관리와 Store Token을 이용한 API 인증 브라우저 저장소를 이용한 인증 값 관리 API 함수 모듈화 Filters - 데이터 포맷팅 Router 심화 FE Testing 1. 프로젝트 생성 및 환경 …","fields":{"slug":"/vue/vue-tip/"},"frontmatter":{"date":"January 14, 2021","title":"[Vue.js] Vue.js 실무 프로젝트에 적용하면 좋은 내용 정리","category":"vue"}}},{"node":{"excerpt":"1. 프로젝트를 로컬 환경에서 실행시키기 주의: 프로젝트 실행 명령어는 프로젝트 설정에 따라 다르다. 로컬 환경의 프로젝트가 아닌 이미 배포되어 있는 웹페이지의 개발자도구를 열고 싶다면 이 단계는 건너 뛴다.  2. iPhone 브라우저 앱에서 PC 로컬 환경에서 실행되고 있는 웹 사이트에 엑세스하기 2-1. mac System Preferences 앱 …","fields":{"slug":"/etc./mobile-safari-inspector/"},"frontmatter":{"date":"January 08, 2021","title":"[etc.] 모바일 Safari 브라우저에서 개발자도구 열기","category":"etc."}}},{"node":{"excerpt":"BEM : Block__Element—Modifier Block : 독립적인 형태이자 기능의 단위 Element : 의존적인 형태, 자신이 속한 블럭 내에서만 의미를 가짐 Modifier : 블럭이나 엘리먼트의 속성, 생긴 게 조금 다르게 생기거나 다르게 동작하는 블럭이나 엘리먼트를 만들 때 사용 자신이 속한 블럭 내에서만 의미를 가지는 Element  …","fields":{"slug":"/css/bem/"},"frontmatter":{"date":"January 04, 2021","title":"[CSS] BEM","category":"css"}}},{"node":{"excerpt":"2018년 8월, Web Frontend 신입 개발자로 현 회사에 입사해 3년차 개발자가 되었지만 회고록은 처음 작성해본다. 어떻게 작성해야 좋은 회고가 될 수 있을지에 대한 고민을 해봤다. 그런데 회고는 결국 지난 날들을 돌아보고 잘 마무리해서 앞으로 더 많이 성장하기 위함이기 때문에 그냥 솔직하게 1년의 일기 같은 회고록을 작성해보기로 했다. 나의 2…","fields":{"slug":"/essay/review-2020/"},"frontmatter":{"date":"January 01, 2021","title":"[Essay] 주니어 프론트엔드 개발자의 2020 회고","category":"essay"}}},{"node":{"excerpt":"브라우저 기본으로 적용되어 있는 스크롤바 디자인을 아래와 같이 변경할 수 있다. SCSS 실행 결과","fields":{"slug":"/css/customize-scroll-bar/"},"frontmatter":{"date":"July 05, 2020","title":"[CSS/SCSS] 스크롤바 디자인 변경하기","category":"css"}}},{"node":{"excerpt":"border-spacing 은 단일값 또는 각각 간격을 조정하는 것이 가능하다.  만약 위 아래에만 20px 간격을 만들 경우 아래와 같이 이 속성을  태그에 사용한다. 실행 결과","fields":{"slug":"/css/border-spacing/"},"frontmatter":{"date":"June 30, 2020","title":"[CSS] table tr 태그 간격 주기","category":"css"}}},{"node":{"excerpt":"1. concat() - 문자열 합치기  매개 변수로 전달된 모든 문자열을 호출 문자열에 붙인 새로운 문자열을 반환한다. 기존 문자열을 변경시키지 않는다. 2. includes() - 문자열에 특정 문자열 포함 여부 확인하기   : 이 문자열에서 검색을 시작할 위치. 기본값은 . 3. split() - 배열로 만들기  문자열을 지정된 구분자로 나눈 후 배…","fields":{"slug":"/JavaScript/string-methods/"},"frontmatter":{"date":"June 07, 2020","title":"[JavaScript] 주요 메소드 정리 - String","category":"javascript"}}},{"node":{"excerpt":"TypeError: Cannot read property of undefined 분명히 데이터가 있는데 undefined 의 속성을 찾을 수 없다고 에러가 발생할 때가 있다. 왜? 분명히 데이터가 있는데?! 왜 undefined 라는 거야? Example 나의 정보를 화면에 보여줄 것이며 나의 정보()의 데이터 구조는 아래와 같다. 이제 아래의 HTML …","fields":{"slug":"/vue/data-undefined-error/"},"frontmatter":{"date":"May 31, 2020","title":"[Vue.js] ❗️TypeError: Cannot read property of undefined","category":"vue"}}},{"node":{"excerpt":"1. concat() - 배열 합치기  인자로 주어진 배열이나 값들을 기존 배열에 합쳐서 새 배열을 반환한다. 기존 배열이나 값을 변경시키지 않는다. 2. push, unshift - 배열에 항목 추가하기  : 배열 끝에 항목 추가  : 배열 앞에 항목 추가 반환 값 : 호출한 배열의 새로운 length 속성 기존 배열을 변경시킨다. 3. pop, shi…","fields":{"slug":"/JavaScript/array-methods/"},"frontmatter":{"date":"May 24, 2020","title":"[JavaScript] 주요 메소드 정리 - Array","category":"javascript"}}},{"node":{"excerpt":"브라우저 주요 기능 사용자가 선택한 자원을 서버에 요청하고 브라우저에 표시하는 것이며 자원은 보통 HTML 문서지만 PDF나 이미지 또는 다른 형태일 수 있다. 브라우저는 HTML과 CSS 명세에 따라 HTML 파일을 해석해서 표시하는데 이 명세는 웹 표준화 기구인 W3C에서 정한다. 브라우저의 주요 구성 요소 사용자 인터페이스 브라우저 엔진 : 사용자 …","fields":{"slug":"/web/browser-rendering/"},"frontmatter":{"date":"May 23, 2020","title":"[WEB] 브라우저 렌더링 원리 알아보기","category":"web"}}},{"node":{"excerpt":"정규표현식(Regular Expression)은 문자열을 처리하는 방법 중의 하나로 특정한 조건의 문자를 ‘검색’하거나 ‘치환’하는 과정을 매우 간편하게 처리 할 수 있도록 하는 수단이다. 정규표현식 사용 방법을 간단하게 알아보자. 위의 예제에서 1행과 같이 정규 표현식을 쓸 수도, 3~4행과 같이 쓸 수도 있다. 변하지 않는 특정 문자열을 찾을 때는 1…","fields":{"slug":"/JavaScript/variable-regex/"},"frontmatter":{"date":"May 21, 2020","title":"[JavaScript] 자바스크립트 변수로 정규식 사용하기","category":"javascript"}}},{"node":{"excerpt":"1. ShortCut 설정 창으로 이동하기  Webstorm - Preferences - Editor - Live Templates - (JavaScript 선택) 우측의 + 버튼 클릭 - Live Templates 클릭 2. 단축어 설정하기  Abbreviation 입력창에 단축어 설정 Description 입력창에 설명 추가 Template text …","fields":{"slug":"/etc./webstorm-shortcut/"},"frontmatter":{"date":"May 21, 2020","title":"[etc.] WebStorm ShortCut 단축어 추가하기","category":"etc."}}},{"node":{"excerpt":"Storage 웹 개발을 하다보면 스토리지가 필요할 때가 있다. 스토리지에 대해 알아보자. HTML5에서 추가된 Storage는  객체의 하위 객체로, 영구 저장인 와 브라우저 탭 별로 유효한 라는 두 가지 저장 방식을 제공한다. cookies vs localStorage vs sessionStorage  cookies localStorage sessio…","fields":{"slug":"/web/storage/"},"frontmatter":{"date":"May 09, 2020","title":"[WEB] cookies, localStorage, sessionStorage 비교","category":"web"}}},{"node":{"excerpt":"CSS 만으로 서서히 나타나고 서서히 사라지는 애니메이션을 구현할 수 있다. 우선, 애니메이션 속성에 대해 알아보자. Animation Animation 속성은 애니메이션에 이름을 지정하거나 지속시간, 속도 조절 등을 지정할 수 있는 속성을 가지고 있다. 애니메이션 속성 종류  : @keyframes 이름 (예제에서는 fadeOut 을 사용)  : 타임 …","fields":{"slug":"/css/fade-in-out/"},"frontmatter":{"date":"May 03, 2020","title":"[CSS] Fade In / Fade Out Animation 추가하기","category":"css"}}},{"node":{"excerpt":"1. Optional Chaining  존재하지 않은 값의 속성에 접근하려 하면 아래와 같이 에러가 발생한다. 따라서  값이 없을 경우를 대비해 아래와 같이 예외 처리 해야만 한다. ECMAScript2020의 Optional Chaining 은 이러한 불편함을 해결해준다.  왼쪽 연산자 값이 이나 일 경우 실행을 멈추고 를 return 하기 때문에 존재…","fields":{"slug":"/JavaScript/ecmascript-2020/"},"frontmatter":{"date":"May 03, 2020","title":"[JavaScript] ECMAScript2020 소개 및 주요 개념","category":"javascript"}}},{"node":{"excerpt":"자바스크립트는 현재 세 가지 종류가 있다. 웹 브라우저에서 동작하는 표준 자바스크립트인 ES5, 2015년부터 매년 새로운 버전을 발표하는 ESNext, 그리고 ESNext에 타입 기능을 추가한 타입스크립트. ESNext는 ES5의 모든 문법을 포함하고, 타입스크립트는 ESNext의 모든 문법을 포함한다. 따라서 타입스크립트로 개발했더라도 타입 기능을 사…","fields":{"slug":"/typescript/welcome-typescript/"},"frontmatter":{"date":"April 11, 2020","title":"[TypeScript] 타입스크립트 소개 및 주요 개념","category":"typescript"}}},{"node":{"excerpt":"클라이언트에서 서버와의 통신이 필요할 때 Ajax나 XML을 이용할 수 있는데, Axios는 Ajax 요청을 하도록 도와주는 라이브러리다. 1. NPM 으로 Axios 설치 2. main.js 에 import 및 설정 3. GET - 서버로 부터 데이터 Read 요청하기 4. POST - 서버로 데이터 Create 요청하기 5. PUT - 서버로 데이터 …","fields":{"slug":"/vue/axios/"},"frontmatter":{"date":"April 01, 2020","title":"[Vue.js] Axios를 이용하여 서버와 통신하기","category":"vue"}}},{"node":{"excerpt":"순수 JavaScript나 jQuery로 DOM에 직접 접근할 수도 있지만, refs를 사용할 수도 있다. 컴포넌트가 mounted될 때, 에 focus를 줘보자.  방법 1. jQuery 아래와 같이 jQuery로 에 focus를 줄 수 있다. HTML JavaScript 방법 2. refs 아래와 같이 refs를 사용하여 에 focus를 줄 수도 있다…","fields":{"slug":"/vue/refs/"},"frontmatter":{"date":"April 01, 2020","title":"[Vue.js] refs로 DOM 직접 접근하기","category":"vue"}}},{"node":{"excerpt":"웹 사이트에서 하나의 vue 파일만으로 하나의 페이지를 만들 수도 있지만, 다른 컴포넌트들을 하위 컴포넌트로 등록하여 만들 수 있다. 그런데, 하위 컴포넌트를 등록하여 만들 때는 데이터 전달이 필요하다. 예를 들어, A라는 페이지에서 팝업을 띄워야할 때 ‘팝업 컴포넌트’를 A 컴포넌트의 하위 컴포넌트로 등록할 수 있는데, A 컴포넌트에서 B 요소를 클릭할…","fields":{"slug":"/vue/component-props/"},"frontmatter":{"date":"March 31, 2020","title":"[vue.js] 하위 컴포넌트 등록과 Props","category":"vue"}}},{"node":{"excerpt":"vue-cli로 프로젝트를 생성하면 src 폴더 안에 components 폴더가 기본으로 존재한다. 이 components 폴더 안에는 여러 페이지에서 공용으로 쓰이는 popup이나 header, footer 같은 컴포넌트들을 모아 놓을 것이다. 이제 src 폴더 안에 pages라는 폴더를 새로 생성하자. 이 pages 폴더 안에는 실제 페이지 단위로 쓰…","fields":{"slug":"/vue/create-component/"},"frontmatter":{"date":"March 30, 2020","title":"[Vue.js] 컴포넌트 생성","category":"vue"}}},{"node":{"excerpt":"vue-cli로 생성한 vue.js 프로젝트의 App.vue 파일의 html 코드 부분을 보면 기본적으로 아래와 같이 작성되어 있다. App.vue 위 코드에서  부분에는 의 라우터 설정에 따라 다른 컴포넌트가 보여지게 된다. 그렇다면 src/router/index.js를 살펴보자. src/router/index.js 기본적으로 가 일 경우에는 Hello…","fields":{"slug":"/vue/router/"},"frontmatter":{"date":"February 10, 2020","title":"[Vue.js] 라우터 설정","category":"vue"}}},{"node":{"excerpt":"프로젝트 구조에는 정답이 없다고 생각하지만, 아래와 같은 구조를 추천한다. Vue.js 프로젝트 추천 구조 build 배포시 관련 설정들이 들어있는 폴더. webpack.config.js : webpack 설정 파일. webpack 빌드를 위해 필요한 로직들을 정의 하는 파일이다. webpack의 핵심 파일이라고 생각하면 된다. 이 파일에는 webpack…","fields":{"slug":"/vue/vue-architecture/"},"frontmatter":{"date":"February 09, 2020","title":"[Vue.js] 프로젝트 추천 구조","category":"vue"}}},{"node":{"excerpt":"Vue.js 프레임워크를 사용한 프로젝트 생성 방법에 대해 알아보고, 추가적으로 함께 설치하면 좋은 라이브러리와 환경 설정에 대해 알아보자. 1. Node.js 설치 https://nodejs.org/ko/ 링크로 접속하여 LTS버전의 Node.js를 설치한다. Vue의 다양한 프로토타이핑 프로젝트를 CLI로 생성하기 위해서는 반드시 Node.js 설치가…","fields":{"slug":"/vue/vue-setting/"},"frontmatter":{"date":"January 19, 2020","title":"[Vue.js] 프로젝트 생성 및 환경 설정","category":"vue"}}},{"node":{"excerpt":"this JavaScript에서의 this는 함수의 현재 실행 문맥이다. 함수 실행에서의 this 함수 실행에서의 this는 전역 객체다. 전역 객체는 실행 환경에 따라 결정되는데, 웹 브라우저에서는 window가 전역 객체다. 아래의 코드를 보자. 7행에서  함수를 호출한 결과를 라는 변수에 넣었다.  함수의 매개변수로 와 을 전달했고, 1행의  함수가…","fields":{"slug":"/JavaScript/this/"},"frontmatter":{"date":"November 30, 2019","title":"[JavaScript] this","category":"javascript"}}},{"node":{"excerpt":"Ajax (Asynchronous JavaScript and XML) Ajax는 자바스크립트를 이용해서 비동기적(Asynchronous)으로 서버와 브라우저가 데이터를 교환할 수 있는 통신 방식을 의미한다. 보통 브라우저에서 웹페이지를 요청하면 서버와 통신하여 화면을 refresh하는데, Ajax를 이용하여, 서버로부터 웹 페이지가 반환될 때 화면 전체를…","fields":{"slug":"/JavaScript/ajax-xml-json/"},"frontmatter":{"date":"November 24, 2019","title":"[JavaScript] Ajax 와 XML / JSON","category":"javascript"}}},{"node":{"excerpt":"JavaScript의 bind는 새로운 바인딩한 함수를 만든다. 바인딩한 함수는 원본 함수 객체를 감싸는 함수이다. call, apply와 비교하며 알아보자. 우선 call과 apply는 함수를 “즉시” 호출하고 컨텍스트를 수정할 때 사용된다. 즉, 그냥 함수가 실행되도록 도와주는 것이다. (더 자세한 설명은 여기에서 확인할 수 있다.) 그러나 bind는…","fields":{"slug":"/JavaScript/bind/"},"frontmatter":{"date":"November 06, 2019","title":"[JavaScript] bind","category":"javascript"}}},{"node":{"excerpt":"JavaScript의 call과 apply는 함수를 호출하는데 사용되는 메소드이다. 더 자세히 알아보기 전에 먼저 함수의 기본적인 호출 방법에 대해 알아보자. 이라는 함수에 매개변수로 두 개의 값을 받고 있으므로 이 함수를 호출할 때 과 같은 방식으로 호출할 수 있다. 이 때 함수의 리턴값은 다. 그렇다면 이제 call과 apply로 함수를 호출하는 방법…","fields":{"slug":"/JavaScript/call-apply/"},"frontmatter":{"date":"November 03, 2019","title":"[JavaScript] 함수의 호출 방법 - call과 apply","category":"javascript"}}},{"node":{"excerpt":"자바스크립트에는 기본적으로 클래스라는 개념이 없기 때문에 상속 기능도 없지만 Prototype을 이용해서 상속 기능을 흉내낼 수는 있다. 객체는 속성을 가질 수 있는데, prototype이라는 속성은 그 용도가 약속되어 있는 특수한 속성이다. prototype에 저장된 속성들은 생성자를 통해서 객체가 만들어질 때 그 객체에 연결된다. 자바스크립트의 모든 …","fields":{"slug":"/JavaScript/prototype/"},"frontmatter":{"date":"October 27, 2019","title":"[JavaScript] 프로토타입(Prototype)","category":"javascript"}}},{"node":{"excerpt":"클로저는 유효범위(Scope)를 기억하는 함수이다. 따라서 내부함수가 외부함수의 지역변수를 기억하여 접근할 수 있다. 외부함수의 실행이 끝나서 외부함수가 소멸된 이후에도 내부함수는 외부함수의 지역변수에 접근할 수 있다. 다시 말해서, 클로저란 내부함수가 외부함수의 지역변수에 접근할 수 있고 외부함수는 외부함수의 지역변수를 사용하는 내부함수가 소멸될 때까지…","fields":{"slug":"/JavaScript/closure/"},"frontmatter":{"date":"October 20, 2019","title":"[JavaScript] 클로저(Closure)","category":"javascript"}}},{"node":{"excerpt":"마크다운(markdown)은 일반 텍스트 문서의 양식을 편집하는 문법이다. README 파일이나 온라인 문서, 혹은 일반 텍스트 편집기로 문서 양식을 편집할 때 쓰인다. 마크다운을 이용해 작성된 문서는 쉽게 HTML 등 다른 문서형태로 변환이 가능하다. 1. 제목 This is a H1 This is a H2 This is a H3 This is a H4…","fields":{"slug":"/etc./markdown-syntax/"},"frontmatter":{"date":"October 09, 2019","title":"[etc.] 마크다운 문법(Markdown Syntax)","category":"etc."}}},{"node":{"excerpt":"크로스 도메인은 쉽게 말해서 서로 다른 도메인 간의 호출이다. 만약 내가 개발한 웹 사이트에서만 사용하기 위해 API 서버를 구축하였는데 다른 웹 서비스에서 이 API 서버에 마음대로 접근하여 API를 호출하여 사용할 수 있다면 문제가 된다. 그래서 JavaScript는 Same Origin Policy(동일 출처 정책)라는 정책을 두어 다른 도메인의 서…","fields":{"slug":"/JavaScript/cross-domain/"},"frontmatter":{"date":"October 06, 2019","title":"[JavaScript] 크로스 도메인(Cross Domain)","category":"javascript"}}},{"node":{"excerpt":"과 는 비슷해 보이지만 엄연히 다르다. 이 두 개의 개념 차이를 명확히 알아두자. undefined 먼저 에 대해 알아보자. 는 변수를 선언만 하고 값을 할당하지 않은 것.\n즉, 자료형이 결정되지 않은 상태이다. 위의 코드를 보면 라는 변수를 선언만하고 값을 할당하지 않았기 때문에 변수 를 출력하면 이 출력되고 변수 의 자료형 역시 결정되지 않은 상태이기…","fields":{"slug":"/JavaScript/null-undefined/"},"frontmatter":{"date":"October 06, 2019","title":"[JavaScript] null과 undefined 비교","category":"javascript"}}},{"node":{"excerpt":"이벤트 위임은 자바스크립트 언어를 사용하는 개발자라면 반드시 알아야 할 개념이다.\n그러나 이벤트 위임에 대해서 알아보기 전에 여기에서 이벤트 버블링과 이벤트 캡쳐링부터 알아보자. 이벤트 위임 하위 요소들 각각에 이벤트를 붙이지 않고 상위 요소에 이벤트를 붙여서 하위 요소들 각각에 이벤트를 붙인 것과 같은 효과를 낸다. 만약 이벤트 위임을 사용하지 않고 하…","fields":{"slug":"/JavaScript/delegation/"},"frontmatter":{"date":"October 05, 2019","title":"[JavaScript] 이벤트 위임","category":"javascript"}}},{"node":{"excerpt":"버블링과 캡쳐링을 본격적으로 알아보기 전에 간단한 코드를 한 번 살펴보자. 태그에 라는 이벤트 핸들러를 할당하였고, 태그에는 어떠한 핸들러도 할당하지 않았다. 그런데 태그를 클릭해도 태그에 할당된 핸들러가 실행이 된다. p 태그를 클릭했는데 왜 div 태그에 할당된 핸들러가 실행이 되는 것일까? 버블링 때문이다. 자바스크립트의 이벤트 버블링 때문에 위의 …","fields":{"slug":"/JavaScript/bubbling-capturing/"},"frontmatter":{"date":"October 05, 2019","title":"[JavaScript] 이벤트 버블링과 이벤트 캡쳐링","category":"javascript"}}},{"node":{"excerpt":"자바스크립트 호이스팅이란? 선언을 현재 스크립트 또는 현재 함수의 맨 위로 이동시키는 JavaScript의 기본 동작이다. 변수가 함수 내에서 정의되었을 경우 : 선언이 함수 내부의 최상위로 Hoisting 됨. 변수가 함수 밖에 정의되었을 경우 : 선언이 전역 컨텍스트의 최상위로 Hoisting 됨. 호이스팅 때문에 변수를 선언하기 전에 사용할 수 있다…","fields":{"slug":"/JavaScript/hoisting/"},"frontmatter":{"date":"September 30, 2019","title":"[JavaScript] 호이스팅(Hoisting)","category":"javascript"}}},{"node":{"excerpt":"자바스크립트에서 클릭 이벤트를 줄 때 어떤 방식을 사용하는가?\n을 사용할 수도, 를 사용할 수도 있지만, 어떤 것을 사용하든 이 두 가지가 서로 어떻게 다른 지 알고 있어야 한다. onclick은 하나만, addEventListener는 여러 개를. 에는 하나의 콜백만 지정할 수 있지만, 를 사용하면 여러 개의 이벤트 리스너를 추가할 수 있다. 따라서 만…","fields":{"slug":"/JavaScript/onclick-vs-addeventlistener/"},"frontmatter":{"date":"September 30, 2019","title":"[JavaScript] onclick과 addEventListener 비교","category":"javascript"}}},{"node":{"excerpt":"다른 회사의 주니어들은 어떻게 일하고 성장하고 있는지 알고 싶어서 참석하게 된 ‘스뽀콘’.\n이 곳에서 들은 내용을 정리하고 공유하고자 한다. 세션 1 2년간 5개 회사 경험기 (정석준님 - 피알앤디컴퍼니 개발자) 이직왕, 프로이직러. 2년 동안 5개 회사를 다녔기 때문에 짧은 기간 내에 면접 경험도 많고 회사 경험이 많다. 좋은 회사 좋은 회사란 어떤 회…","fields":{"slug":"/seminar/2019-startup-junior-seminar/"},"frontmatter":{"date":"September 29, 2019","title":"[Seminar] 2019 스뽀콘 - '스'타트업 '뽀'시래기 '콘'퍼런스 참석 후기","category":"seminar"}}},{"node":{"excerpt":"JavaScript에서 사용하는 변수 선언 키워드 , , 의 차이점에 대해서 알아보고 그 차이점을 알기 위해 필요한 개념인 선언, 할당, Scope에 대해서 알아보자. 그리고 아무런 키워드를 사용하지 않았을 때는 어떻게 되는지 알아보자 var 키워드 없이 변수를 선언하면 전역 변수가 된다. 따라서 전역 유효범위에 속해지기 때문에 코드 내에서 어디서든 변수…","fields":{"slug":"/JavaScript/var-let-const/"},"frontmatter":{"date":"September 22, 2019","title":"[JavaScript] var, let, const 비교","category":"javascript"}}},{"node":{"excerpt":"Notion을 용량 제한 없이 이용하려면 Personal Plan 기준으로 월 $5의 비용이 발생한다.\n그러나 이제 간단한 학교 이메일 주소 인증만으로 Notion을 무료로 이용할 수 있다. Notion에 대한 더 자세한 정보는 Notion 공식 홈페이지에서 확인할 수 있다. Education Plan으로 Notion 무료 이용하기 Notion App 열…","fields":{"slug":"/etc./notion-for-students-&-teachers/"},"frontmatter":{"date":"September 21, 2019","title":"[etc.] Notion is FREE for students & teachers","category":"etc."}}},{"node":{"excerpt":"2018 타입스크립트 밋업 (2018/01/18) 2017년 학부생 때 TypeScript 언어를 사용하여 여러 프로젝트를 진행한 경헝이 있는데 현업에 계신 분들은 TypeScript를 어떻게 사용하고 있는 지 궁금해서 참석하게 된 밋업. 이 곳에서 들은 내용을 정리하고 공유하고자 한다. 세션 1 TypeScript로부터 얻은 것과 잃은 것 (손찬욱님 -…","fields":{"slug":"/seminar/2018-typescript-korea-meetup/"},"frontmatter":{"date":"January 18, 2018","title":"[Seminar] 2018 TypeScript Korea MeetUp","category":"seminar"}}}]}},"pageContext":{}},"staticQueryHashes":["3128451518","342751336"]}