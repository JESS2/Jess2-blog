{"data":{"site":{"siteMetadata":{"title":"Jess2.xyz","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"","fields":{"slug":"/vue/create-component/"},"frontmatter":{"date":"March 30, 2020","title":"create-component","category":"vue"}}},{"node":{"excerpt":"vue-cli로 생성한 vue.js 프로젝트의 App.vue 파일의 html 코드 부분을 보면 기본적으로 아래와 같이 작성되어 있다. App.vue 위 코드에서   부분에는  의 라우터 설정에 따라 다른 컴포넌트가 보여지게 된다. 그렇다면 src/router/index.js를 살펴보자. src/router/index.js 기본적으로  가  일 경우에는 H…","fields":{"slug":"/vue/npm-router/"},"frontmatter":{"date":"February 10, 2020","title":"[Vue.js] 라우터 설정","category":"vue"}}},{"node":{"excerpt":"프로젝트 구조에는 정답이 없다고 생각하지만, 아래와 같은 구조를 추천한다. Vue.js 프로젝트 추천 구조 build 배포시 관련 설정들이 들어있는 폴더. webpack.config.js : webpack 설정 파일. webpack 빌드를 위해 필요한 로직들을 정의 하는 파일이다. webpack의 핵심 파일이라고 생각하면 된다. 이 파일에는 webpack…","fields":{"slug":"/vue/vue-architecture/"},"frontmatter":{"date":"February 09, 2020","title":"[Vue.js] 프로젝트 추천 구조","category":"vue"}}},{"node":{"excerpt":"Vue.js 프레임워크를 사용한  프로젝트 생성 방법 에 대해 알아보고, 추가적으로 함께 설치하면 좋은  라이브러리 와  환경 설정 에 대해 알아보자. 1. Node.js 설치 https://nodejs.org/ko/  링크로 접속하여 LTS버전의 Node.js를 설치한다. Vue의 다양한 프로토타이핑 프로젝트를 CLI로 생성하기 위해서는 반드시 Node…","fields":{"slug":"/vue/vue-setting/"},"frontmatter":{"date":"January 19, 2020","title":"[Vue.js] 프로젝트 생성 및 환경 설정","category":"vue"}}},{"node":{"excerpt":"this JavaScript에서의 this는  함수의 현재 실행 문맥 이다. 함수 실행에서의 this 함수 실행에서의 this는  전역 객체 다. 전역 객체는 실행 환경에 따라 결정되는데, 웹 브라우저에서는 window가 전역 객체다. 아래의 코를 보자. 7행에서   함수를 호출한 결과를  라는 변수에 넣었다.   함수의 매개변수로  와  을 전달했고, …","fields":{"slug":"/JavaScript/this/"},"frontmatter":{"date":"November 30, 2019","title":"[JavaScript] this","category":"javascript"}}},{"node":{"excerpt":"Ajax (Asynchronous JavaScript and XML) Ajax는 자바스크립트를 이용해서 비동기적(Asynchronous)으로  서버와 브라우저가 데이터를 교환할 수 있는 통신 방식 을 의미한다. 보통 브라우저에서 웹페이지를 요청하면 서버와 통신하여 화면을 refresh하는데, Ajax를 이용하여, 서버로부터 웹 페이지가 반환될 때 화면 전…","fields":{"slug":"/JavaScript/ajax-xml-json/"},"frontmatter":{"date":"November 24, 2019","title":"[JavaScript] Ajax 와 XML / JSON","category":"javascript"}}},{"node":{"excerpt":"JavaScript의 bind는 새로운 바인딩한 함수를 만든다. 바인딩한 함수는 원본 함수 객체를 감싸는 함수이다. call, apply와 비교하며 알아보자. 우선 call과 apply는  함수를 “즉시” 호출하고 컨텍스트를 수정 할 때 사용된다. 즉, 그냥 함수가 실행되도록 도와주는 것이다. (더 자세한 설명은  여기 에서 확인할 수 있다.) 그러나 b…","fields":{"slug":"/JavaScript/bind/"},"frontmatter":{"date":"November 06, 2019","title":"[JavaScript] bind","category":"javascript"}}},{"node":{"excerpt":"JavaScript의 call과 apply는  함수를 호출 하는데 사용되는 메소드이다. 더 자세히 알아보기 전에 먼저  함수의 기본적인 호출 방법 에 대해 알아보자. 이라는 함수에 매개변수로 두 개의 값을 받고 있으므로 이 함수를 호출할 때  과 같은 방식으로 호출할 수 있다. 이 때 함수의 리턴값은  다. 그렇다면 이제 call과 apply로 함수를 호…","fields":{"slug":"/JavaScript/call-apply/"},"frontmatter":{"date":"November 03, 2019","title":"[JavaScript] 함수의 호출 방법 - call과 apply","category":"javascript"}}},{"node":{"excerpt":"자바스크립트에는 기본적으로 클래스라는 개념이 없기 때문에 상속 기능도 없지만 Prototype을 이용해서 상속 기능을 흉내낼 수는 있다. 객체는 속성을 가질 수 있는데, prototype이라는 속성은 그 용도가 약속되어 있는 특수한 속성이다. prototype에 저장된 속성들은 생성자를 통해서 객체가 만들어질 때 그 객체에 연결된다. 자바스크립트의 모든 …","fields":{"slug":"/JavaScript/prototype/"},"frontmatter":{"date":"October 27, 2019","title":"[JavaScript] 프로토타입(Prototype)","category":"javascript"}}},{"node":{"excerpt":"클로저는 유효범위(Scope)를 기억하는 함수이다. 따라서 내부함수가 외부함수의 지역변수를 기억하여 접근할 수 있다. 외부함수의 실행이 끝나서 외부함수가 소멸된 이후에도 내부함수는 외부함수의 지역변수에 접근할 수 있다. 다시 말해서, 클로저란 내부함수가 외부함수의 지역변수에 접근할 수 있고 외부함수는 외부함수의 지역변수를 사용하는 내부함수가 소멸될 때까지…","fields":{"slug":"/JavaScript/closure/"},"frontmatter":{"date":"October 20, 2019","title":"[JavaScript] 클로저(Closure)","category":"javascript"}}},{"node":{"excerpt":"마크다운(markdown)은 일반 텍스트 문서의 양식을 편집하는 문법이다. README 파일이나 온라인 문서, 혹은 일반 텍스트 편집기로 문서 양식을 편집할 때 쓰인다. 마크다운을 이용해 작성된 문서는 쉽게 HTML 등 다른 문서형태로 변환이 가능하다. 1. 제목 This is a H1 This is a H2 This is a H3 This is a H4…","fields":{"slug":"/etc./markdown-syntax/"},"frontmatter":{"date":"October 09, 2019","title":"마크다운 문법(Markdown Syntax)","category":"etc."}}},{"node":{"excerpt":"크로스 도메인은 쉽게 말해서  서로 다른 도메인 간의 호출 이다. 만약 내가 개발한 웹 사이트에서만 사용하기 위해 API 서버를 구축하였는데 다른 웹 서비스에서 이 API 서버에 마음대로 접근하여 API를 호출하여 사용할 수 있다면 문제가 된다. 그래서 JavaScript는  Same Origin Policy(동일 출처 정책) 라는 정책을 두어 다른 도메…","fields":{"slug":"/JavaScript/cross-domain/"},"frontmatter":{"date":"October 06, 2019","title":"[JavaScript] 크로스 도메인(Cross Domain)","category":"javascript"}}},{"node":{"excerpt":"과  는 비슷해 보이지만 엄연히 다르다. 이 두 개의 개념 차이를 명확히 알아두자. undefined 먼저  에 대해 알아보자.  는 변수를 선언만 하고 값을 할당하지 않은 것. \n즉, 자료형이 결정되지 않은 상태이다. 위의 코드를 보면  라는 변수를 선언만하고 값을 할당하지 않았기 때문에 변수  를 출력하면  이 출력되고 변수  의 자료형 역시 결정되지…","fields":{"slug":"/JavaScript/null-undefined/"},"frontmatter":{"date":"October 06, 2019","title":"[JavaScript] null과 undefined 비교","category":"javascript"}}},{"node":{"excerpt":"이벤트 위임 은 자바스크립트 언어를 사용하는 개발자라면 반드시 알아야 할 개념이다. \n그러나 이벤트 위임에 대해서 알아보기 전에  여기 에서  이벤트 버블링과 이벤트 캡쳐링 부터 알아보자. 이벤트 위임 하위 요소들 각각에 이벤트를 붙이지 않고  상위 요소에 이벤트를 붙여서  하위 요소들 각각에 이벤트를 붙인 것과 같은 효과를 낸다. 만약 이벤트 위임을 사…","fields":{"slug":"/JavaScript/delegation/"},"frontmatter":{"date":"October 05, 2019","title":"[JavaScript] 이벤트 위임","category":"javascript"}}},{"node":{"excerpt":"버블링과 캡쳐링을 본격적으로 알아보기 전에 간단한 코드를 한 번 살펴보자. 태그에  라는 이벤트 핸들러를 할당하였고,  태그에는 어떠한 핸들러도 할당하지 않았다. 그런데  태그를 클릭해도  태그에 할당된 핸들러가 실행이 된다. p 태그를 클릭했는데 왜 div 태그에 할당된 핸들러가 실행이 되는 것일까? 버블링 때문이다. 자바스크립트의 이벤트 버블링 때문에…","fields":{"slug":"/JavaScript/bubbling-capturing/"},"frontmatter":{"date":"October 05, 2019","title":"[JavaScript] 이벤트 버블링과 이벤트 캡쳐링","category":"javascript"}}},{"node":{"excerpt":"자바스크립트 호이스팅이란? 선언을 현재 스크립트 또는 현재 함수의 맨 위로 이동시키는 JavaScript의 기본 동작이다. 변수가 함수 내에서 정의되었을 경우 : 선언이  함수 내부의 최상위 로 Hoisting 됨. 변수가 함수 밖에 정의되었을 경우 : 선언이  전역 컨텍스트의 최상위 로 Hoisting 됨. 호이스팅 때문에 변수를 선언하기 전에 사용할 …","fields":{"slug":"/JavaScript/hoisting/"},"frontmatter":{"date":"September 30, 2019","title":"[JavaScript] 호이스팅(Hoisting)","category":"javascript"}}},{"node":{"excerpt":"자바스크립트에서 클릭 이벤트를 줄 때 어떤 방식을 사용하는가?\n 을 사용할 수도,  를 사용할 수도 있지만, 어떤 것을 사용하든 이 두 가지가 서로 어떻게 다른 지 알고 있어야 한다. onclick은 하나만, addEventListener는 여러 개를. 에는 하나의 콜백만 지정할 수 있지만,  를 사용하면 여러 개의 이벤트 리스너를 추가할 수 있다. 따라…","fields":{"slug":"/JavaScript/onclick-vs-addeventlistener/"},"frontmatter":{"date":"September 30, 2019","title":"[JavaScript] onclick과 addEventListener 비교","category":"javascript"}}},{"node":{"excerpt":"다른 회사의 주니어들은 어떻게 일하고 성장하고 있는지 알고 싶어서 참석하게 된 ‘스뽀콘’. \n이 곳에서 들은 내용을 정리하고 공유하고자 한다. 세션 1  2년간 5개 회사 경험기 (정석준님 - 피알앤디컴퍼니 개발자) 이직왕, 프로이직러. 2년 동안 5개 회사를 다녔기 때문에 짧은 기간 내에 면접 경험도 많고 회사 경험이 많다. 좋은 회사 좋은 회사란 어떤…","fields":{"slug":"/seminar/2019-startup-junior-seminar/"},"frontmatter":{"date":"September 29, 2019","title":"[Seminar] 2019 스뽀콘 - '스'타트업 '뽀'시래기 '콘'퍼런스 참석 후기","category":"seminar"}}},{"node":{"excerpt":"JavaScript에서 사용하는 변수 선언 키워드  ,  ,  의 차이점에 대해서 알아보고 그 차이점을 알기 위해 필요한 개념인 선언, 할당, Scope에 대해서 알아보자. 그리고 아무런 키워드를 사용하지 않았을 때는 어떻게 되는지 알아보자 var 키워드 없이 변수를 선언하면 전역 변수가 된다. 따라서 전역 유효범위에 속해지기 때문에 코드 내에서 어디서든…","fields":{"slug":"/JavaScript/var-let-const/"},"frontmatter":{"date":"September 22, 2019","title":"[JavaScript] var, let, const 비교","category":"javascript"}}},{"node":{"excerpt":"Notion을 용량 제한 없이 이용하려면 Personal Plan 기준으로 월 $5의 비용이 발생한다. \n그러나 이제 간단한  학교 이메일 주소 인증 만으로  Notion을 무료로 이용 할 수 있다. Notion에 대한 더 자세한 정보는  Notion 공식 홈페이지 에서 확인할 수 있다. Education Plan으로 Notion 무료 이용하기 Notio…","fields":{"slug":"/etc./notion-for-students-&-teachers/"},"frontmatter":{"date":"September 21, 2019","title":"Notion is FREE for students & teachers","category":"etc."}}},{"node":{"excerpt":"2018 타입스크립트 밋업 (2018/01/18) 2017년 학부생 때 TypeScript 언어를 사용하여 여러 프로젝트를 진행한 경헝이 있는데 현업에 계신 분들은 TypeScript를 어떻게 사용하고 있는 지 궁금해서 참석하게 된 밋업. 이 곳에서 들은 내용을 정리하고 공유하고자 한다. 세션 1  TypeScript로부터 얻은 것과 잃은 것 (손찬욱님 …","fields":{"slug":"/seminar/2018-typescript-korea-meetup/"},"frontmatter":{"date":"January 18, 2018","title":"[Seminar] 2018 TypeScript Korea MeetUp","category":"seminar"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}