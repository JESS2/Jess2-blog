{"data":{"site":{"siteMetadata":{"title":"Jess2's Devlog","author":"Jess2","siteUrl":"https://jess2.io","comment":{"disqusShortName":"https-jess2-netlify-com","utterances":""},"sponsor":{"buyMeACoffeeId":"Jess2"}}},"markdownRemark":{"id":"e7bd976b-6e34-54c7-a499-c4db4a6330d7","excerpt":"자바스크립트에서 클릭 이벤트를 줄 때 어떤 방식을 사용하는가?\n 을 사용할 수도,  를 사용할 수도 있지만, 어떤 것을 사용하든 이 두 가지가 서로 어떻게 다른 지 알고 있어야 한다. onclick은 하나만, addEventListener…","html":"<p>자바스크립트에서 클릭 이벤트를 줄 때 어떤 방식을 사용하는가?\n<code class=\"language-text\">onclick</code>을 사용할 수도, <code class=\"language-text\">addEventListener</code>를 사용할 수도 있지만, 어떤 것을 사용하든 이 두 가지가 서로 어떻게 다른 지 알고 있어야 한다.</p>\n<blockquote>\n<p>onclick은 하나만, addEventListener는 여러 개를.</p>\n</blockquote>\n<p><code class=\"language-text\">onclick</code>에는 하나의 콜백만 지정할 수 있지만, <code class=\"language-text\">addEventListener</code>를 사용하면 여러 개의 이벤트 리스너를 추가할 수 있다.</p>\n<p>따라서 만약 <code class=\"language-text\">onclick</code> 이벤트 핸들러를 두 번 이상 사용한다면, 기존 이벤트 핸들러를 덮어쓰기 때문에 <strong>가장 아래에 추가한 핸들러</strong>만 제대로 작동한다.</p>\n<p>반면, <code class=\"language-text\">addEventListener</code>는 기존 이벤트 핸들러를 덮어 쓰지 않고 얼마든지 계속해서 핸들러를 추가해도 <strong>모든 핸들러</strong>가 정상적으로 작동한다.</p>\n<p>아래의 코드를 보자.</p>\n<p>Example</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onclick-1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onclick-2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>btn에 onclick과 addEventListener 이벤트 핸들러를 각각 두 개씩, 총 네 개의 핸들러를 만들었지만, alert(‘onclick-1’)는 실행되지 않고 나머지 세 개만 실행되는 것을 확인할 수 있다.</p>\n<p>그럼 onclick은 왜 있는거야?\n이쯤 되면 이런 의문이 들 수 있다.</p>\n<p>클릭 이벤트를 주고 싶으면 그냥 addEventListener를 사용하면 되지, onclick은 굳이 왜 만든 것일까?</p>\n<p>onclick은 초기 DOM Level-0에서 제공하던 기능이고, 그 이후 버전인 Level-2에서 추가된 것이 addEventListener이다.</p>\n<p>addEventListener는 이벤트 캡쳐링, 버블링 같은 이벤트 방식을 설정할 수 있기 때문에 이벤트 제어에 있어서 더욱 유용하지만, addEventListener는 IE8 이하에서는 작동을 하지 않는다. 그래서 구형 브라우저 지원이 필요하면 onclick을 사용하거나 다른 방법을 찾아야 한다.</p>","frontmatter":{"title":"onclick vs addEventListener","date":"September 30, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/JavaScript/자바스크립트에서-클릭-이벤트를-줄-때-어떤-방식을-사용하는가?/","previous":{"fields":{"slug":"/etc./junior_seminar/"},"frontmatter":{"title":"2019 스뽀콘 - '스'타트업 '뽀'시래기 '콘'퍼런스 참석 후기","category":"etc."}},"next":null}}