{"data":{"site":{"siteMetadata":{"title":"Jess2's Devlog","author":"Jess2","siteUrl":"https://jess2.io","comment":{"disqusShortName":"https-jess2-netlify-com","utterances":""},"sponsor":{"buyMeACoffeeId":"Jess2"}}},"markdownRemark":{"id":"244042d8-07fc-502a-8ba4-8b74f82c6d88","excerpt":"…","html":"<p>버블링과 캡쳐링을 본격적으로 알아보기 전에 간단한 코드를 한 번 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert('The DIV handler!')\"</span><span class=\"token operator\">></span>\n  <span class=\"token constant\">DIV</span> 태그\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token constant\">P</span> 태그<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">div</code> 태그에 <code class=\"language-text\">alert(&#39;The DIV handler!&#39;)</code>라는 이벤트 핸들러를 할당하였고, <code class=\"language-text\">p</code> 태그에는 어떠한 핸들러도 할당하지 않았다.</p>\n<p>그런데 <code class=\"language-text\">p</code> 태그를 클릭해도 <code class=\"language-text\">div</code> 태그에 할당된 핸들러가 실행이 된다.</p>\n<p>조금 이상하다.\n<code class=\"language-text\">p</code> 태그를 클릭했는데 왜 <code class=\"language-text\">div</code> 태그에 할당된 핸들러가 실행이 되는 것일까?</p>\n<p>버블링 때문이다.</p>\n<p>자바스크립트의 이벤트 버블링 때문에 위의 코드에서 <code class=\"language-text\">div</code> 태그 안에 있는 <code class=\"language-text\">p</code> 태그를 클릭하면 <code class=\"language-text\">div</code> 태그에 할당된 클릭 이벤트가 발생하는 것이다.</p>\n<p>그럼, 버블링이 정확히 뭔데?</p>\n<p>“엘리먼트에 이벤트가 발생하면 먼저 해당 엘리먼트의 핸들러를 실행시킨 후, 그의 부모 엘리먼트의 핸들러를 실행시키고, 또 그 위의 조상 엘리먼트들의 핸들러를 차례로 실행시킨다”</p>\n<p>마치 버블이 아래에서 위로 올라가는 것과 같아서 버블링이라고 한다. 아래의 예시를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>form onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert('form')\"</span><span class=\"token operator\">></span>\n  <span class=\"token constant\">FORM</span>\n  <span class=\"token operator\">&lt;</span>div onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert('div')\"</span><span class=\"token operator\">></span>\n    <span class=\"token constant\">DIV</span>\n    <span class=\"token operator\">&lt;</span>p onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert('p')\"</span><span class=\"token operator\">></span><span class=\"token constant\">P</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">form</code> 태그에는 <code class=\"language-text\">alert(&#39;form&#39;)</code> 클릭 이벤트를 줬고, <code class=\"language-text\">div</code> 태그에는 <code class=\"language-text\">alert(&#39;div&#39;)</code> 클릭 이벤트를 줬고, <code class=\"language-text\">p</code> 태그에는 <code class=\"language-text\">alert(&#39;p&#39;)</code> 클릭 이벤트를 줬다.</p>\n<p>그런데, <code class=\"language-text\">p</code> 태그는 <code class=\"language-text\">div</code> 태그가 감싸고 있고, 또 그 <code class=\"language-text\">div</code> 태그는 <code class=\"language-text\">form</code> 태그가 감싸고 있다.</p>\n<p>따라서 이벤트 버블링으로 인해, <code class=\"language-text\">p</code> 태그를 클릭하면 <code class=\"language-text\">p -&gt; div</code> -> <code class=\"language-text\">form</code> 순서로 알림창이 뜬다.</p>\n<p>그리고 <code class=\"language-text\">div</code> 태그를 클릭하면 <code class=\"language-text\">div</code> -> <code class=\"language-text\">form</code> 순서로 알림창이 뜬다.</p>\n<p><code class=\"language-text\">p</code> 태그를 클릭하면 <code class=\"language-text\">window</code> 에서 부터 <code class=\"language-text\">p</code> 태그까지 요소 중간에 있는 이벤트들을 전부 검색해서 따로 메모리에 가지고 있다고 생각하면 된다.</p>\n<p>해당 엘리먼트부터 차례대로 위로 올라가면서 이벤트들을 발생시키는 것이 이벤트 버블링이다.</p>\n<h3 id=\"버블링-멈추기\"><a href=\"#%EB%B2%84%EB%B8%94%EB%A7%81-%EB%A9%88%EC%B6%94%EA%B8%B0\" aria-label=\"버블링 멈추기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버블링 멈추기</h3>\n<p>기본적으로 이벤트 버블링은 항상 발생한다. 아래의 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>form onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert('form')\"</span><span class=\"token operator\">></span>\n  <span class=\"token constant\">FORM</span>\n  <span class=\"token operator\">&lt;</span>div onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert('div')\"</span><span class=\"token operator\">></span>\n    <span class=\"token constant\">DIV</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token constant\">P</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></code></pre></div>\n<p>form태그와 div태그에만 이벤트 핸들러를 주고, p태그에는 이벤트 핸들러를 주지 않았다. 하지만, 이벤트 버블링으로 인해 p 태그를 클릭하면 div => form순서로 알림창이 뜬다.</p>\n<p>이벤트 버블링이 발생되지 않았으면 좋겠어</p>\n<p>이벤트 버블링은 event.stopPropagation()을 이용해서 간단하게 멈출 수 있다. 아래의 코드를 보자.</p>\n<p>1\n2\n3\n4\n5</p>\n<form onclick=\"alert('form')\">FORM\n  <div onclick=\"alert('div')\">DIV\n    <p onclick=\"event.stopPropagation()\">P</p>\n  </div>\n</form>\n<p>p태그에 onclick=“event.stopPropagation()“를 주었더니, p태그를 클릭해도 아까처럼 이벤트가 발생하지 않는다. 이벤트 버블링이 작동하지 않기 때문이다.</p>\n<p>이벤트 캡쳐링\n그렇다면 이번에는 이벤트 캡쳐링에 대해서 알아보자. 이벤트 캡쳐링도 이벤트 버블링과 비슷하다. 버블링이 아래에서 위로 올라가는 것이라면, 캡쳐링은 위에서 아래로 내려가는 것이다.</p>\n<p>addEventListener를 이용하여 버블링과 캡쳐링에 대해서 살펴보자.</p>\n<p>capturing단계에서 이벤트를 catch하려면 addEventListener의 세 번째 요소를 true로 설정해줘야 한다. 기본적으로 addEventListener의 세 번째 요소를 작성하지 않으면 default값이 false인데, false로 설정할 경우, 핸들러는 버블링 단계로 설정된다. 반면에 true로 설정할 경우, 핸들러는 캡쳐링 단계로 설정된다.</p>\n<p>먼저 addEventListener의 세 번째 요소를 작성하지 않았을 경우를 살펴보자.</p>\n<p>1\n2\n3\n4\n5</p>\n<form>FORM\n  <div>DIV\n    <p>P</p>\n  </div>\n</form>\n1\n2\n3\n4\n//JavaScript Code\nfor(let elem of document.querySelectorAll('*')) {\n    elem.addEventListener(\"click\", e => alert(elem.tagName));\n}\n<p>p태그를 클릭하면 P -> DIV -> FORM -> BODY -> HTML순서로 알림창이 열린다. addEventListener의 세 번째 요소를 작성하지 않아서 기본값인 false로 되었기 때문에 핸들러가 버블링 단계로 설정되었기 때문이다.</p>\n<p>이번에는 addEventListener의 세 번째 요소를 true로 작성해보자.</p>\n<p>1\n2\n3\n4\n5</p>\n<form>FORM\n  <div>DIV\n    <p>P</p>\n  </div>\n</form>\n1\n2\n3\n4\n//JavaScript Code\nfor(let elem of document.querySelectorAll('*')) {\n    elem.addEventListener(\"click\", e => alert(elem.tagName), true);\n}\n<p>p태그를 클릭하면 HTML -> BODY -> FORM -> DIV -> P순서로 알림창이 열린다. addEventListener의 세 번째 요소를 true로 작성했기 때문에 핸들러가 캡쳐링 단계로 설정되었기 때문이다.</p>","frontmatter":{"title":"<JS> Event Bubbling과 Event Capturing","date":"October 05, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/JavaScript/event-bubbling과-event-capturing/","previous":{"fields":{"slug":"/etc./junior_seminar/"},"frontmatter":{"title":"2019 스뽀콘 - '스'타트업 '뽀'시래기 '콘'퍼런스 참석 후기","category":"etc."}},"next":null}}